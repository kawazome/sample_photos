openapi: 3.0.0
info:
  title: iHub
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /getBucketInfo:
    get:
      summary: getBucketInfo
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buckets'
              examples:
                example:
                  value:
                    region: eu-west-1
                    middle:
                      bucket: ihubtest
                      keybase: thumb/user1
                    extra_large:
                      bucket: ihubtest
                      keybase: noramal/user1
                    original:
                      bucket: ihubtest
                      keybase: original/user1
                    exif:
                      bucket: ihubtest
                      keybase: exif/user1
      operationId: getBucketInfo
      parameters: []
      tags:
        - bucket
  /getFileList:
    post:
      summary: getFileList
      tags:
        - image
      responses:
        '200':
          description: |-
            OK

            compose the s3 key using “sourceDevice”, “uploadingTime” and “imageId”
          content:
            application/json:
              schema:
                type: object
                properties:
                  Items:
                    type: array
                    items:
                      $ref: '#/components/schemas/imageItem'
                  Count:
                    type: integer
                  LastEvaluatedKey:
                    type: string
                    description: this property should be sent back when getting next page
              examples:
                example:
                  value:
                    Items:
                      - imageId: a6729b73-2376-46b5-a8e6-31e614d677b9
                        sourceDevice: da910bad-b28a-432a-8680-ae117a8d69a5
                        extName: jpg
                        shootingTime: 1267103483
                        uploadingTime: 1592656023
                        leftDay: 15
                        contentLength: 454765
                        playTime: 0
                        datePath: 20200701/15
                    Count: 25
                    LastEvaluatedKey: zzzzzzzz
      operationId: getFileList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filter'
            examples:
              example:
                value:
                  filterName1: format
                  filterValue1: JPEG
                  filterName2: shootingTime
                  filterValue2: 1543534454|1548534754
                  limit: 25
                  LastEvaluatedKey: xxxxxxxxxx
  /getFilter:
    post:
      summary: getfilter
      tags:
        - image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Items:
                    type: array
                    items:
                      $ref: '#/components/schemas/filterItem'
              examples:
                example:
                  value:
                    Items:
                      - name: Kawazome
                        value: kawazome@gmail.com
                      - name: Taro
                        value: tarotanaka@gmail.com
      operationId: getFilter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/filterName'
            examples:
              example:
                value:
                  filterName1: address
        description: ''
  /getFileCount:
    post:
      summary: getFileCount
      tags:
        - image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  LastEvaluatedKey:
                    type: string
                  Count:
                    type: integer
                  size:
                    type: integer
                required:
                  - LastEvaluatedKey
                  - Count
              examples:
                example-1:
                  value:
                    LastEvaluatedKey: string
                    Count: 0
                    size: 0
      operationId: getFileCount
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filterName1:
                  type: string
                filterValue1:
                  type: string
                filterName2:
                  type: string
                filterValue2:
                  type: string
                LastEvaluatedKey:
                  type: string
                operation:
                  type: string
              required:
                - filterName1
                - filterValue1
                - filterName2
                - filterValue2
            examples:
              example-1:
                value:
                  filterName1: string
                  filterValue1: string
                  filterName2: string
                  filterValue2: string
                  LastEvaluatedKey: string
                  operation: string
  /processAllFile:
    post:
      summary: processAllFile
      tags:
        - image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  LastEvaluatedKey:
                    type: string
      operationId: processAllFile
      description: Client need to repeat call this API until “LastEvaluatedKey” in output is undefined.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filterName1:
                  type: string
                filterValue1:
                  type: string
                filterName2:
                  type: string
                filterValue2:
                  type: string
                LastEvaluatedKey:
                  type: string
                operation:
                  type: string
                optCountLimits:
                  type: integer
                target:
                  type: array
                  items:
                    type: string
                album:
                  type: string
              required:
                - filterName1
                - filterValue1
                - operation
            examples: {}
  /beginUpload:
    post:
      summary: beginUpload
      tags:
        - image
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Items:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        newName:
                          type: string
                      required:
                        - name
                        - newName
                required:
                  - Items
              examples:
                example-1:
                  value:
                    Items:
                      - name: string
                        newName: string
      operationId: beginUpload
      description: |-
        1. Client calls beginUpload to get file names;
        2. Client calls s3 using bucket and keybase+filename to upload file
        3. ihub will creating thumbnail images as file uploaded
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Items:
                  type: array
                  items:
                    type: string
                storage:
                  type: integer
                totalSize:
                  type: integer
              required:
                - Items
                - storage
                - totalSize
  /getGoogleToken:
    get:
      summary: getGoogleToken
      tags:
        - token
      responses: {}
      operationId: getGoogleToken
      description: 'Open web browser use the following url: https://kulyuqi158.execute-api.cn-north-1.amazonaws.com.cn/default/getGoogleToken?userid=23432&appRedirectUrl=http://somehost/callback'
  /getFlickrToken:
    get:
      summary: getFlickrToken
      tags:
        - token
      responses: {}
      operationId: getFlickrToken
      description: 'Open web browser use the following url: https://kulyuqi158.execute-api.cn-north-1.amazonaws.com.cn/default/getFlickrToken?userid=23432&appRedirectUrl=http://somehost/callback'
  /getYouTubeToken:
    get:
      summary: getYouTubeToken
      tags:
        - token
      responses: {}
      operationId: getYouTubeToken
      description: 'Open web browser use the following url: https://kulyuqi158.execute-api.cn-north-1.amazonaws.com.cn/default/getYouTubeToken?userid=23432&appRedirectUrl=http://somehost/callback'
  /disconnectService:
    post:
      summary: disconnectService
      tags:
        - ' service'
      responses: {}
      operationId: disconnectService
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service:
                  type: string
                  description: 'Googledrive, Flickr, Youtubelive'
              required:
                - service
            examples:
              example:
                value:
                  service: Googledrive
  /getServiceInfo:
    post:
      summary: getServiceInfo
      tags:
        - ' service'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  info:
                    type: object
                    properties:
                      autotransfer:
                        type: boolean
                      failedCount:
                        type: integer
                      expired:
                        type: boolean
              examples:
                example-1:
                  value:
                    info:
                      autotransfer: true
                      failedCount: 0
                      expired: true
      operationId: getServiceInfo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service:
                  type: string
              required:
                - service
        description: ''
  /setServiceInfo:
    post:
      summary: setServiceInfo
      tags:
        - ' service'
      responses: {}
      operationId: setServiceInfo
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service:
                  type: string
                info:
                  type: object
                  properties:
                    autotransfer:
                      type: boolean
            examples:
              example-1:
                value:
                  service: string
                  info:
                    autotransfer: true
  /getFailedList:
    post:
      summary: getFailedList
      tags:
        - ' service'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Items:
                    type: array
                    items:
                      $ref: '#/components/schemas/imageItem'
                  Count:
                    type: integer
                  LastEvaluatedKey:
                    type: string
                required:
                  - Items
                  - Count
              examples:
                example-1:
                  value:
                    Items:
                      - imageId: string
                        sourceDevice: string
                        extName: string
                        shootingTime: 0
                        uploadingTime: 0
                        leftDay: 0
                        contentLength: 0
                        playTime: 0
                        datePath: string
                    Count: 0
                    LastEvaluatedKey: string
      operationId: getFailedList
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service:
                  type: string
  /transfer:
    post:
      summary: transfer
      tags:
        - ' service'
      responses: {}
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service:
                  type: string
                Items:
                  type: array
                  items:
                    type: string
              required:
                - service
                - Items
  /retransfer:
    post:
      summary: retransfer
      tags:
        - ' service'
      responses: {}
      operationId: retransfer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service:
                  type: string
              required:
                - service
  /getAddressList:
    get:
      summary: ''
      operationId: getAddressList
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Items:
                    type: array
                    items:
                      $ref: '#/components/schemas/email'
              examples:
                example-1:
                  value:
                    Items:
                      - name: string
                        email: string
      tags:
        - email
  /addAddress:
    post:
      summary: addAddress
      tags:
        - email
      responses: {}
      operationId: addAddress
      description: Add address. Return error (ERR_ITEM_EXISTED) if the email is existed.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/email'
            examples:
              example:
                value:
                  name: kawazome
                  email: kawazome@gmail.com
        description: ''
  /setAddress:
    post:
      summary: setAddress
      tags:
        - email
      responses: {}
      operationId: setAddress
      description: Update address. Return error (ERR_ITEM_NOT_FOUND) if the email is not existed.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/email'
            examples: {}
        description: ''
  /removeAddress:
    post:
      summary: removeAddress
      tags:
        - email
      responses: {}
      operationId: removeAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/email'
  /sendFile:
    post:
      summary: sendFile
      tags:
        - email
      responses: {}
      operationId: sendFile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                target:
                  type: array
                  items:
                    type: string
                Items:
                  type: array
                  items:
                    type: string
  /receiveFileList:
    post:
      summary: receiveFileList
      tags:
        - email
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  Items:
                    type: array
                    items:
                      $ref: '#/components/schemas/imageItem'
                  fromAddress:
                    type: string
                  toAddress:
                    type: string
                  Count:
                    type: integer
      operationId: receiveFileList
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sendId:
                  type: string
        description: client received from an URL
  /receiveFile:
    post:
      summary: receiveFile
      tags:
        - email
      responses: {}
      operationId: receiveFile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sendId:
                  type: string
        description: client received from an URL
  /setStoreTime:
    post:
      summary: setStoreTime
      tags:
        - storage
      responses: {}
      operationId: setStoreTime
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                Items:
                  type: array
                  items:
                    type: string
                storage:
                  type: integer
              required:
                - Items
                - storage
  /getStorageSize:
    get:
      summary: getStorageSize
      tags:
        - storage
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalSize:
                    type: integer
                  usedSize:
                    type: integer
                required:
                  - totalSize
                  - usedSize
      operationId: getStorageSize
  /addAlbum:
    post:
      summary: addAlbum
      tags:
        - album
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: Album name
                  value:
                    type: string
                    description: Album ID
                required:
                  - name
                  - value
              examples:
                example:
                  value:
                    name: 2020 summer
                    value: sdertr34gtrgtr84
      operationId: addAlbum
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: |
                    Album name
                description:
                  type: string
                  description: Album description
              required:
                - name
                - description
            examples:
              example:
                value:
                  name: 2020 summer
                  description: Memories of summer vacation in 2020
  /removeAlbum:
    post:
      summary: removeAlbum
      tags:
        - album
      responses: {}
      operationId: removeAlbum
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
              required:
                - value
  /renameAlbum:
    post:
      summary: renameAlbum
      tags:
        - album
      responses: {}
      operationId: renameAlbum
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                value:
                  type: string
              required:
                - name
                - description
                - value
  /addAlbumImage:
    post:
      summary: addAlbumImage
      tags:
        - album
      responses: {}
      operationId: addAlbumImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                  description: Album ID
                Items:
                  type: array
                  description: 'contentid format is: image#shootingTime#imageId'
                  items:
                    type: string
              required:
                - value
                - Items
            examples:
              example:
                value:
                  value: sdertr34gtrgtr84
                  Items:
                    - image#1266302616#57af6e07-e4a7-4b88-a398-6f929a68acc6
                    - image#1266302512#420ddbd3-214c-4567-b361-188b6e874fd9
  /removeAlbumImage:
    post:
      summary: removeAlbumImage
      tags:
        - album
      responses: {}
      operationId: removeAlbumImage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                value:
                  type: string
                Items:
                  type: array
                  description: 'contentid format is: image#shootingTime#imageId'
                  items:
                    type: string
              required:
                - value
                - Items
  /refreshToken:
    post:
      summary: refreshToken
      tags:
        - auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  idToken:
                    type: string
                  nonce:
                    type: string
                required:
                  - idToken
                  - nonce
      operationId: refreshToken
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                idToken:
                  type: string
                nonce:
                  type: string
              required:
                - idToken
                - nonce
  /getUserProfileAndLastDevice:
    post:
      summary: getUserProfileAndLastDevice
      tags:
        - auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                  given_name:
                    type: string
                  family_name:
                    type: string
                  email:
                    type: string
                  email_verified:
                    type: boolean
                  locale:
                    type: string
                  registered_date:
                    type: string
                  address:
                    type: object
                    properties:
                      country:
                        type: string
                  registration_client_id:
                    type: string
                  state:
                    type: array
                    items:
                      type: string
                  agreement_version:
                    type: string
                  agreement_date:
                    type: string
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/product'
                required:
                  - sub
                  - given_name
                  - family_name
                  - email
                  - email_verified
                  - registered_date
                  - address
                  - registration_client_id
                  - state
                  - agreement_version
                  - agreement_date
              examples:
                example-1:
                  value:
                    sub: string
                    given_name: string
                    family_name: string
                    email: string
                    email_verified: true
                    locale: string
                    registered_date: string
                    address:
                      country: string
                    registration_client_id: string
                    state:
                      - string
                    agreement_version: string
                    agreement_date: string
                    products:
                      - method: string
                        connect_guide: string
                        upload_guide: string
                        registeredDate: string
                        productName: string
                        serialNumber: string
                        productId: string
      operationId: getUserProfileAndLastDevice
      description: ''
components:
  schemas:
    bucket:
      description: ''
      type: object
      properties:
        bucket:
          type: string
          minLength: 1
        keybase:
          type: string
          minLength: 1
      required:
        - bucket
        - keybase
    imageItem:
      title: imageItem
      type: object
      x-examples:
        example:
          imageId: a6729b73-2376-46b5-a8e6-31e614d677b9
          sourceDevice: da910bad-b28a-432a-8680-ae117a8d69a5
          extName: jpg
          shootingTime: 1267103483
          uploadingTime: 1592656023
          leftDay: 15
          contentLength: 454765
          playTime: 0
          datePath: 20200701/15
      properties:
        imageId:
          type: string
        sourceDevice:
          type: string
          description: ''
        extName:
          type: string
        shootingTime:
          type: integer
          description: seconds from 1970/1/1
        uploadingTime:
          type: integer
          description: seconds from 1970/1/1
        leftDay:
          type: integer
          description: 'leftDay == 0 means there is no original image, while leftDay == -1 means permanent'
        contentLength:
          type: integer
        playTime:
          type: integer
        datePath:
          type: string
      required:
        - imageId
        - sourceDevice
        - extName
        - shootingTime
        - uploadingTime
        - leftDay
        - contentLength
        - playTime
        - datePath
    filter:
      title: filter
      type: object
      x-examples:
        example:
          filterName1: format
          filterValue1: JPEG
          filterName2: shootingTime
          filterValue2: 1543534454|1548534754
          limit: 25
          LastEvaluatedKey: XXXXXXX
      properties:
        filterName1:
          type: string
        filterValue1:
          type: string
          description: when filterName1 is "all" this value is ignored
        filterName2:
          type: string
        filterValue2:
          type: string
        limit:
          type: integer
          description: return no more than this number of images
        LastEvaluatedKey:
          type: string
      required:
        - filterName1
        - filterValue1
        - limit
    buckets:
      title: buckets
      type: object
      properties:
        region:
          type: string
        middle:
          $ref: '#/components/schemas/bucket'
        extra_large:
          $ref: '#/components/schemas/bucket'
        original:
          $ref: '#/components/schemas/bucket'
        exif:
          $ref: '#/components/schemas/bucket'
      required:
        - region
        - middle
        - extra_large
        - original
        - exif
      x-examples:
        example:
          region: eu-west-1
          middle:
            bucket: ihubtest
            keybase: thumb/user1
          extra_large:
            bucket: ihubtest
            keybase: noramal/user1
          original:
            bucket: ihubtest
            keybase: original/user1
          exif:
            bucket: ihubtest
            keybase: exif/user1
    imageItems:
      title: imageItems
      type: object
      x-examples:
        example-1:
          Items:
            - imageId: string
              sourceDevice: string
              extName: string
              shootingTime: 0
              uploadingTime: 0
              leftDay: 0
              contentLength: 0
              playTime: 0
              datePath: string
          Count: 0
          LastEvaluatedKey: string
      properties:
        Items:
          type: array
          items:
            $ref: '#/components/schemas/imageItem'
        Count:
          type: integer
        LastEvaluatedKey:
          type: string
      required:
        - Items
        - Count
        - LastEvaluatedKey
    filterName:
      title: filterName
      type: object
      properties:
        filterName1:
          type: string
          description: 'ormat, storage, camera, service, address'
      required:
        - filterName1
    filterItem:
      title: filterItem
      type: object
      properties:
        name:
          type: string
        value:
          type: string
      required:
        - name
        - value
    email:
      title: email
      type: object
      properties:
        name:
          type: string
          description: Destination name
        email:
          type: string
          description: Email address
      required:
        - name
        - email
      x-examples:
        example:
          name: Kawazome
          email: kawazome@gmail.com
    product:
      description: |-
        if no iHub-supported device, return null, no products attribute in return;
        in products, only the latest linked device (iHub support) is returned;
        in products[0].method attribute, the link method is shown (none, email, eu)
      type: object
      properties:
        method:
          type: string
          minLength: 1
        connect_guide:
          type: string
          minLength: 1
        upload_guide:
          type: string
          minLength: 1
        registeredDate:
          type: string
          minLength: 1
        productName:
          type: string
          minLength: 1
        serialNumber:
          type: string
          minLength: 1
        productId:
          type: string
          minLength: 1
      required:
        - method
        - connect_guide
        - upload_guide
        - registeredDate
        - productName
        - serialNumber
        - productId
tags:
  - name: email
  - name: album
  - name: image
  - name: ' service'
  - name: bucket
  - name: token
  - name: auth
  - name: storage
